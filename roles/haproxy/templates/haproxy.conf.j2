{{ ansible_managed | comment }}

global
    nbthread 4
    cpu-map auto:1/1-4 0-3
    maxconn 20480

    log /dev/log	local0
    log /dev/log	local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # https://stackoverflow.com/a/64119235
    noreuseport

    # generated 2021-04-28, Mozilla Guideline v5.6, HAProxy 2.2.8, OpenSSL 1.1.1d, intermediate configuration
    # https://ssl-config.mozilla.org/#server=haproxy&version=2.2.8&config=intermediate&openssl=1.1.1d&guideline=5.6
    # intermediate configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
    log	global
    mode	http
    option	dontlognull
    option	httplog
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

{% for host in haproxy if host.users is defined %}
userlist {{ host.hostname | replace('.', '-') }}-credentials
{% for user in host.users %}
  user {{ user.username }} insecure-password {{ user.password }}
{% endfor %}

{% endfor %}

frontend prometheus-frontend
   bind [::1]:8405
   option dontlog-normal
   http-request use-service prometheus-exporter if { path /metrics }

frontend haproxy-frontend
{% for ip in haproxy_listen %}
    bind {{ ip }}:80 v4v6
    bind {{ ip }}:443 v4v6 ssl crt /etc/haproxy/ssl alpn h2,http/1.1 allow-0rtt
{% endfor %}

    mode http

    # enable HSTS
    http-response set-header Strict-Transport-Security "max-age=63072000;{% if not letsencrypt_staging %} preload;{% endif %}"

    # disable FLoC tracking
    http-response set-header Permissions-Policy "interest-cohort=()"

    # disable clients from sniffing the media type
    http-response set-header X-Content-Type-Options "nosniff"

    # clickjacking protection
    http-response set-header X-Frame-Options "SAMEORIGIN"

    # keep referrer data off of HTTP connections
    http-response set-header Referrer-Policy "same-origin"

    # Block pages from loading when they detect reflected XSS attacks
    http-response set-header X-XSS-Protection "1; mode=block"

{% for redirect in haproxy_redirect %}
    http-request redirect prefix https://{{ redirect.to }} code 301 if { hdr(host),field(1,:) -i {{ redirect.from }} }
{% endfor %}

{% for host in haproxy %}
    acl {{ host.hostname | replace('.', '-') }}-acl hdr(host),field(1,:) {{ host.hostname }}
{% if 'deny_paths' in host %}
{% for deny_path in host.deny_paths %}
    acl {{ host.hostname | replace('.', '-') }}-deny-acl path_beg {{ deny_path }}
{% endfor %}
    http-request deny if {{ host.hostname | replace('.', '-') }}-acl {{ host.hostname | replace('.', '-') }}-deny-acl
{% endif %}

{% endfor %}
    redirect scheme https code 301 if !{ ssl_fc }

{% for host in haproxy %}
    use_backend {{ host.hostname | replace('.', '-') }}-backend if {{ host.hostname | replace('.', '-') }}-acl
{% endfor %}

{% for host in haproxy %}
backend {{ host.hostname | replace('.', '-') }}-backend
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    mode http
{% if "healthcheck_url" in host and host.healthcheck_url %}
    option httpchk {{ host.healthcheck_url }}
{% endif %}
    option forwardfor
    option http-server-close
{% if host.users is defined %}
    http-request auth unless { http_auth({{ host.hostname | replace('.', '-') }}-credentials) }
{% endif %}
{% if host.headers is defined %}
{% for header_name, header_value in host.headers.items() %}
    http-response set-header {{ header_name }} "{{ header_value }}"
{% endfor %}
{% endif %}
{% if "timeout" in host and host.timeout %}
    timeout server {{ host.timeout }}
{% endif %}
{% for target in host.target %}
    server {{ target | replace('.', '-') }} {{ target }}:{{ host.target_port }} {% if "healthcheck" in host and host.healthcheck %}check port {{ host.target_port }}{% endif %} {% if "ssl" in host %}ssl{% endif %} {% if "ssl_verify" in host and not host.ssl_verify %}verify none{% endif %}

{% endfor %}

{% endfor %}

{% if haproxy_postgresql | length > 0 %}
listen postgresql-primary
    bind :::5432 v4v6
    mode tcp
    option	tcplog
    option httpchk OPTIONS /read-write
    default-server on-marked-down shutdown-sessions
{% for target in haproxy_postgresql %}
    server {{ target | replace('.', '-') }} {{ target }}:5432 check port 8008
{% endfor %}

listen postgresql-replica
    bind :::5433 v4v6
    mode tcp
    option	tcplog
    option httpchk OPTIONS /read-only
    default-server on-marked-down shutdown-sessions
{% for target in haproxy_postgresql %}
    server {{ target | replace('.', '-') }} {{ target }}:5432 check port 8008
{% endfor %}
{% endif %}
