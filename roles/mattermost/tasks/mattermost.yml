- name: Installation de rsync
  ansible.builtin.package:
    name: rsync
    state: present

- name: Téléchargement de la clé publique GPG de Mattermost
  ansible.builtin.uri:
    url: https://deb.packages.mattermost.com/pubkey.gpg
    return_content: true
  register: _mattermost_gpg_public_key_downloaded

- name: Importation de la clé publique GPG
  ansible.builtin.command:
    cmd: gpg --import -
    stdin: "{{ _mattermost_gpg_public_key_downloaded.content }}"
  changed_when: "'imported: 1' in _mattermost_gpg_public_key_imported.stdout"
  register: _mattermost_gpg_public_key_imported

- name: Téléchargement de l'archive Mattermost v{{ mattermost_version }}
  ansible.builtin.get_url:
    url: https://releases.mattermost.com/{{ mattermost_version }}/mattermost-{{ mattermost_version }}-linux-amd64.tar.gz
    dest: /usr/local/src/mattermost-{{ mattermost_version }}.tar.gz
    owner: root
    group: root
    mode: "u=rw,go=r"

- name: Téléchargement de la signature GPG pour l'archive
  ansible.builtin.get_url:
    url: https://releases.mattermost.com/{{ mattermost_version }}/mattermost-{{ mattermost_version }}-linux-amd64.tar.gz.sig
    dest: /usr/local/src/mattermost-{{ mattermost_version }}.tar.gz.sig
    owner: root
    group: root
    mode: "u=rw,go=r"

- name: Vérification de la signature GPG
  ansible.builtin.command:
    cmd: gpg --verify mattermost-{{ mattermost_version }}.tar.gz.sig mattermost-{{ mattermost_version }}.tar.gz
    chdir: /usr/local/src
  changed_when: false

- name: Création du dossier de Mattermost
  ansible.builtin.file:
    path: /var/www/{{ mattermost_owner }}/mattermost-{{ mattermost_version }}
    owner: "{{ mattermost_owner }}"
    group: "{{ mattermost_owner }}"
    mode: "u=rwx,g=rx,o="
    state: directory

- name: Décompression de l'archive
  ansible.builtin.unarchive:
    src: /usr/local/src/mattermost-{{ mattermost_version }}.tar.gz
    dest: /var/www/{{ mattermost_owner }}/mattermost-{{ mattermost_version }}
    creates: /var/www/{{ mattermost_owner }}/mattermost-{{ mattermost_version }}/README.md
    remote_src: true
    extra_opts:
      - --strip-components=1
    owner: "{{ mattermost_owner }}"
    group: "{{ mattermost_owner }}"

- name: Vérification si Mattermost est déjà installé
  ansible.builtin.stat:
    path: /var/www/{{ mattermost_owner }}/dist
    follow: false
  register: _mattermost_current_install_dir

- name: Récupération de la liste des dossiers d'installation
  ansible.builtin.find:
    path: /var/www/{{ mattermost_owner }}
    file_type: directory
    use_regex: true
    recurse: false
    pattern: '^mattermost-[0-9]+\.[0-9]+\.[0-9]+$'
  register: _mattermost_installed_dirs

- name: Récupération de la liste des archives
  ansible.builtin.find:
    path: /usr/local/src
    file_type: file
    use_regex: true
    recurse: false
    pattern: '^mattermost-[0-9]+\.[0-9]+\.[0-9]+\.tar\.gz$'
  register: _mattermost_archives

- name: Récupération de la plus ancienne version et de la version courante
  ansible.builtin.set_fact:
    mattermost_oldest_archive: "{{ mattermost_sorted_archives | first }}"
    mattermost_oldest_install_dir: "{{ mattermost_sorted_install_dirs | first }}"
    mattermost_oldest_version: "{{ mattermost_sorted_versions | first }}"
    mattermost_current_version: |-
      {{ _mattermost_current_install_dir.stat.lnk_source | default('0.0.0')
        | replace(mattermost_install_prefix, '') }}
  vars:
    mattermost_sorted_archives: |-
      {{ _mattermost_archives.files
        | map(attribute='path')
        | community.general.version_sort }}
    mattermost_sorted_install_dirs: |-
      {{ _mattermost_installed_dirs.files
        | map(attribute='path')
        | community.general.version_sort }}
    mattermost_sorted_versions: |-
      {{ mattermost_sorted_install_dirs
        | map('replace', mattermost_install_prefix, '')
        | list }}
    mattermost_install_prefix: /var/www/{{ mattermost_owner }}/mattermost-

- name: Vérification que la nouvelle version est plus récente que la version courante
  ansible.builtin.assert:
    that: mattermost_version is version(mattermost_current_version, '>=')
    msg: "Mattermost v{{ mattermost_version }} < v{{ mattermost_current_version }} (current)!!!"
    quiet: true

- name: Copie des dossiers de l'installation existante
  # This must be run only for updates, not for a fresh install.
  ansible.builtin.synchronize:
    src: /var/www/{{ mattermost_owner }}/dist/{{ directory }}/
    dest: /var/www/{{ mattermost_owner }}/mattermost-{{ mattermost_version }}/{{ directory }}/
    compress: false
    delete: true
    recursive: true
  delegate_to: "{{ inventory_hostname }}"
  loop:
    - config
    - logs
    - plugins
    - client/plugins
  loop_control:
    loop_var: directory
  when:
    - _mattermost_current_install_dir.stat.exists
    - _mattermost_current_install_dir.stat.islnk
    # We ensured in the previous task that the new version isn't older than current version
    - mattermost_version != mattermost_current_version

- name: Création du lien symbolique vers la dernière version de Mattermost
  ansible.builtin.file:
    src: /var/www/{{ mattermost_owner }}/mattermost-{{ mattermost_version }}
    dest: /var/www/{{ mattermost_owner }}/dist
    state: link
  notify: restart mattermost

- name: Configuration de la base de données de Mattermost
  # This is needed in order to start the server in a test environment
  # All the other settings will be managed in the Mattermost admin panel.
  ansible.builtin.lineinfile:
    dest: /var/www/{{ mattermost_owner }}/dist/config/config.json
    regex: '(\s+"DataSource":)'
    line: '\1 "postgres://{{ mattermost_owner }}:{{ mattermost_postgresql_password }}@{{ postgresql_host }}:5432/{{ mattermost_owner }}?sslmode=disable\\u0026connect_timeout=10",'
    backrefs: true
    validate: /var/www/{{ mattermost_owner }}/dist/bin/mattermost config validate -c %s
  no_log: true
  notify: restart mattermost

- name: Configuration du service systemd
  ansible.builtin.template:
    src: systemd/mattermost.service.j2
    dest: /etc/systemd/system/mattermost.service
    owner: root
    group: root
    mode: "u=rw,go=r"
  notify:
    - restart mattermost

- name: Activation de Mattermost au démarrage
  ansible.builtin.service:
    name: mattermost
    state: started
    enabled: true

- name: Trigger Mattermost handlers
  ansible.builtin.meta: flush_handlers

- name: Vérification que le serveur Mattermost est prêt
  ansible.builtin.uri:
    url: http://localhost:8065/api/v4/system/ping
  register: _mattermost_server_ping
  retries: 10
  delay: 3
  until: _mattermost_server_ping is success

- name: Suppression de la plus ancienne version (v{{ mattermost_oldest_version }})
  ansible.builtin.file:
    state: absent
    path: "{{ mattermost_oldest_install_dir }}"
  when: _mattermost_installed_dirs.files | length > 5

- name: Suppression de la plus ancienne archive
  ansible.builtin.file:
    state: absent
    path: "{{ mattermost_oldest_archive }}"
  when: _mattermost_archives.files | length > 5

- name: Configuration des backups Borgmatic
  ansible.builtin.template:
    src: borgmatic/mattermost.yml.j2
    dest: /etc/borgmatic.d/mattermost-{{ mattermost_owner }}.yml
    owner: root
    group: root
    mode: "u=rw,go="
    validate: borgmatic config validate --show -c %s
  tags: ['borgmatic_config']

- name: Installation de rclone pour les backups du stockage S3
  ansible.builtin.import_role:
    name: rclone
  vars:
    rclone_src_host: "{{ mattermost_s3_host }}"
    rclone_src_bucket: "{{ mattermost_s3_bucket }}"
    rclone_src_access_key: "{{ mattermost_s3_access_key }}"
    rclone_src_secret_key: "{{ mattermost_s3_secret_key }}"
  when: mattermost_s3_enabled
  tags: ['rclone']
