- name: Installation de Valkey
  ansible.builtin.package:
    name:
      - valkey
      - valkey-server
      - valkey-tools
    state: present

- name: Création de la configuration dynamique
  ansible.builtin.template:
    src: valkey.conf.j2
    dest: /etc/valkey/valkey-{{ valkey_name_instance }}.conf
    owner: valkey
    group: valkey
    mode: "u=rw,go="
    force: false
  notify: Restart Valkey

- name: Création de la configuration static
  ansible.builtin.template:
    src: valkey-static.conf.j2
    dest: /etc/valkey/valkey-{{ valkey_name_instance }}-static.conf
    owner: valkey
    group: valkey
    mode: "u=r,go="
  notify: Restart Valkey

- name: Création de la configuration ACL
  ansible.builtin.template:
    src: valkey-acl.conf.j2
    dest: /etc/valkey/valkey-{{ valkey_name_instance }}-acl.conf
    owner: valkey
    group: valkey
    mode: "u=r,go="
  notify: Restart Valkey

- name: Activation overcommit_memory
  ansible.posix.sysctl:
    name: "vm.overcommit_memory"
    value: '1'
    sysctl_file: /etc/sysctl.d/80-overcommit-memory.conf
    sysctl_set: true
    state: present
    reload: true

- name: Desactiver le server Valkey par default
  ansible.builtin.service:
    name: valkey-server.service
    state: stopped
    enabled: false

- name: Activation de Valkey au démarrage
  ansible.builtin.service:
    name: valkey-server@{{ valkey_name_instance }}.service
    state: started
    enabled: true

- name: Trigger Valkey handler
  # We force keydb to restart its config to ensure our config has been applied.
  # This forced restart is required on debian systems,
  # because keydb appears to be already started and enabled by apt,
  # and later in this role, telegraf expects our keydb to be correctly configured.
  ansible.builtin.meta: flush_handlers
