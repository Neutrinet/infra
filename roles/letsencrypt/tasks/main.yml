---
- name: Installation des dépendances python
  ansible.builtin.package:
    name:
      - python3-dev
      - python3-virtualenv
      - virtualenv
    state: present

- name: Création des dossiers Let's Encrypt
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: "u=rw,go=r"
    state: directory
  with_items:
    - /etc/letsencrypt
    - /etc/letsencrypt/gandi
    - /etc/letsencrypt/hooks.d
    - /opt/letsencrypt

- name: Installation de pip et certbot  # noqa package-latest
  ansible.builtin.pip:
    name:
      - pip
      - certbot
      - certbot-plugin-gandi
    virtualenv: /opt/letsencrypt
    virtualenv_python: python3
    state: latest
    chdir: /opt/letsencrypt

- name: Création d'un cron job pour renouveler les certificats
  cron:
    name: "letsencrypt-update"
    cron_file: letsencrypt-update
    special_time: daily
    user: "root"
    job: "/opt/letsencrypt/bin/certbot renew"

- name: Test si le compte Let's Encrypt existe
  stat:
    path: /etc/letsencrypt/accounts
  register: letsencrypt_accounts

- name: Enregistrement du compte Let's Encrypt
  command: >
    /opt/letsencrypt/bin/certbot register
      --non-interactive
    {% if letsencrypt_staging %}
      --staging
      --register-unsafely-without-email
    {% else %}
      --email {{ mail_notification }}
    {% endif %}
      --no-eff-email
      --agree-tos
  when: not letsencrypt_accounts.stat.exists

- name: Installation des hooks
  copy:
    src: "{{ hook_script }}"
    dest: /etc/letsencrypt/hooks.d/{{ hook_script }}
    mode: "u=rwx,go=rx"
    owner: root
    group: root
  loop: "{{ letsencrypt_hook_scripts }}"
  loop_control:
    loop_var: hook_script

- name: Config de Gandi pour Let's Encrypt
  template:
    src: gandi.ini.j2
    dest: /etc/letsencrypt/gandi/gandi.ini
    owner: root
    group: root
    mode: "u=rw,go="

- name: Création des certificats challenge gandi
  include_tasks: gandi/main.yml
  loop: "{{ letsencrypt_domains }}"
  loop_control:
    loop_var: domain
    label: "{{ domain.name }}"
