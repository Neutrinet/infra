define BOGON_PREFIXES_V4 = [
  0.0.0.0/8+,             # RFC 1122 'this' network
  10.0.0.0/8+,            # RFC 1918 private space
  100.64.0.0/10+,         # RFC 6598 Carrier grade nat space
  127.0.0.0/8+,           # RFC 1122 localhost
  169.254.0.0/16+,        # RFC 3927 link local
  172.16.0.0/12+,         # RFC 1918 private space
  192.0.2.0/24+,          # RFC 5737 TEST-NET-1
  192.88.99.0/24+,        # RFC 7526 6to4 anycast relay
  192.168.0.0/16+,        # RFC 1918 private space
  198.18.0.0/15+,         # RFC 2544 benchmarking
  198.51.100.0/24+,       # RFC 5737 TEST-NET-2
  203.0.113.0/24+,        # RFC 5737 TEST-NET-3
  224.0.0.0/4+,           # multicast
  240.0.0.0/4+            # reserved
];

function reject_v4_bogon_prefixes(string direction; string locality)
prefix set bogon_prefixes;
{
  bogon_prefixes = BOGON_PREFIXES_V4;

  if (net ~ bogon_prefixes) then {
    print "[", direction, "][", locality, "] Reject: Bogon prefix: ", net, " ", bgp_path;
    return true;
  }
  return false;
}

function reject_v4_small_prefixes(string direction; string locality)
{
      if (net.len > 24) then {
          print "[", direction, "][", locality, "] Reject: Too small prefix: ", net, " ", bgp_path;
          return true;
      }
  return false;
}

function reject_v4_default_route(string direction; string locality)
{
  if (net ~ [0.0.0.0/0]) then {
    print "[", direction, "][", locality, "] Reject: default route: ", net, " ", bgp_path;
    return true;
  }
  return false;
}

function reject_v4_invalid_rpki(string direction; string locality)
{
  if roa_check(roa_v4, net, bgp_path.last_nonaggregated) = ROA_INVALID then {
    print "[", direction, "][", locality, "] Reject: Invalid RPKI: ", net, " ", bgp_path;
    return true;
  }
  return false;
}